mod config;
mod model;
mod scraper;
mod parser;
mod analyzer;
mod normalizer;
mod notifier;
mod storage;

use analyzer::AnalyzerImpl;
use crate::analyzer::price_analysis::Analyzer;
use config::load_config;
use model::ScrapeRequest;
use scraper::ScraperImpl;
use parser::KleinanzeigenParser;
use normalizer::normalize_all;
use notifier::TelegramNotifier;
use storage::SqliteStorage;

#[tokio::main]
async fn main() {
    // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = match load_config("config.json") {
        Ok(cfg) => cfg,
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}");
            return;
        }
    };

    println!("üîÑ –°—Ç–∞—Ä—Ç: –∞–Ω–∞–ª–∏–∑ {} –º–æ–¥–µ–ª–∏(–µ–π)...", config.models.len());

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    let scraper = ScraperImpl::new();
    let parser = KleinanzeigenParser::new();
    let analyzer = AnalyzerImpl::new();
    let storage = SqliteStorage::new("data.db").unwrap();
    let notifier = TelegramNotifier::new(config.telegram_bot_token.clone(), config.telegram_chat_id);

    // 3. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ –º–æ–¥–µ–ª—è–º
    for model_cfg in &config.models {
        println!("üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏: {}", model_cfg.query);

        let request = ScrapeRequest {
            query: model_cfg.query.clone(),
            category_id: model_cfg.category_id.clone(),
        };

        // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
        if let Ok(Some(prev_stats)) = storage.get_stats(&model_cfg.query) {
            println!(
                "üìÇ –°—Ç–∞—Ä–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {:.2} ‚Ç¨ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {})",
                prev_stats.avg_price,
                prev_stats.last_updated
            );
        }        

        let html = match scraper.fetch(&request).await {
            Ok(html) => html,
            Err(e) => {
                match e {
                    model::ScraperError::Timeout => eprintln!("‚è± –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
                    model::ScraperError::HttpError(msg) => eprintln!("üåê HTTP –æ—à–∏–±–∫–∞: {}", msg),
                    model::ScraperError::InvalidResponse => eprintln!("üìÑ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"),
                }
                continue;
            }
        };

        let mut offers = match parser.parse(&html) {
            Ok(o) => o,
            Err(e) => {
                match e {
                    model::ParserError::HtmlParseError(msg) => eprintln!("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ HTML: {}", msg),
                    model::ParserError::MissingField(field) => eprintln!("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {}", field),
                }
                continue;
            }
        };

        normalize_all(&mut offers, &config.models);

        for offer in &offers {
            if let Err(e) = storage.save_offer(offer) {
                eprintln!("‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {:?}", e);
            }
        }

        let stats = analyzer.calculate_stats(&offers);

        if let Err(e) = storage.update_stats(&stats) {
            eprintln!("‚ö† –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {:?}", e);
        }

        let good_offers = analyzer.find_deals(&offers, &stats, model_cfg);

        println!(
            "üìä {} | –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {:.2} ‚Ç¨ | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {:.2} | –ù–∞–π–¥–µ–Ω–æ: {}",
            stats.model,
            stats.avg_price,
            stats.std_dev,
            good_offers.len()
        );

        for offer in good_offers {
            println!("üí∏ {} ‚Äî {:.2} ‚Ç¨", offer.title, offer.price);
            println!("üìç {} | üìù {}", offer.location, offer.description);
            println!("üîó {}", offer.link);

            match storage.is_notified(&offer.id) {
                Ok(true) => {
                    println!("‚è© –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                    continue;
                }
                Ok(false) => {} // –∏–¥—ë–º –¥–∞–ª—å—à–µ
                Err(e) => {
                    eprintln!("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {:?}", e);
                    continue;
                }
            }

            if let Err(e) = notifier.notify(&offer).await {
                eprintln!("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {:?}", e);
            } else if let Err(e) = storage.mark_notified(&offer.id) {
                eprintln!("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {:?}", e);
            }
        }

        println!("-----------------------------\n");
    }

    println!("üèÅ –ì–æ—Ç–æ–≤–æ. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥.", config.check_interval_seconds);
}
