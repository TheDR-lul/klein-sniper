mod config;
mod model;

use config::load_config;
use model::ScrapeRequest;

#[tokio::main]
async fn main() {
    // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = match load_config("config.json") {
        Ok(cfg) => cfg,
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}");
            return;
        }
    };

    println!("üîÑ –°—Ç–∞—Ä—Ç: –∞–Ω–∞–ª–∏–∑ {} –º–æ–¥–µ–ª–∏(–µ–π)...", config.models.len());

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∏)
    // let scraper = ScraperImpl::new();
    // let parser = ParserImpl::new();
    // let analyzer = AnalyzerImpl::new();
    // let storage = SqliteStorage::new("data.db").unwrap();
    // let notifier = TelegramNotifier::new(...);

    // 3. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ –º–æ–¥–µ–ª—è–º
    for model_cfg in config.models.iter() {
        println!("üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏: {}", model_cfg.query);

        let request = ScrapeRequest {
            query: model_cfg.query.clone(),
            category_id: model_cfg.category_id.clone(),
        };

        // üîΩ –ù–∏–∂–µ –∏–¥—É—Ç –∑–∞–≥–ª—É—à–∫–∏, –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        println!("üì° –°–∫—Ä–µ–π–ø–∏–Ω–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{}'", request.query, request.category_id);

        println!("üîç –ü–∞—Ä—Å–∏–Ω–≥ HTML...");
        println!("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...");
        println!("üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: 635‚Ç¨ | –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");

        // –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        println!("‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ROG Ally –∑–∞ 499‚Ç¨");
        println!("üîó https://www.kleinanzeigen.de/s-anzeige/...");
    }

    println!("üèÅ –ì–æ—Ç–æ–≤–æ. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥.", config.check_interval_seconds);
}
