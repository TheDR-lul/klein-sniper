mod config;
mod model;
mod scraper;
mod parser;
mod analyzer;
mod normalizer;
mod notifier;
mod storage;

use analyzer::AnalyzerImpl;
use config::load_config;
use model::ScrapeRequest;
use scraper::ScraperImpl;
use parser::KleinanzeigenParser;
use crate::analyzer::price_analysis::Analyzer;
use normalizer::normalize_all;
use notifier::TelegramNotifier;
use storage::SqliteStorage;

#[tokio::main]
async fn main() {
    // 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = match load_config("config.json") {
        Ok(cfg) => cfg,
        Err(e) => {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}");
            return;
        }
    };

    println!("üîÑ –°—Ç–∞—Ä—Ç: –∞–Ω–∞–ª–∏–∑ {} –º–æ–¥–µ–ª–∏(–µ–π)...", config.models.len());

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    let scraper = ScraperImpl::new();
    let parser = KleinanzeigenParser::new();
    let analyzer = AnalyzerImpl::new();
    let storage = SqliteStorage::new("data.db").unwrap();
    let notifier = TelegramNotifier::new(config.telegram_bot_token.clone(), config.telegram_chat_id);

    // 3. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ –º–æ–¥–µ–ª—è–º
    for model_cfg in config.models.iter() {
        println!("üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–∏: {}", model_cfg.query);

        let request = ScrapeRequest {
            query: model_cfg.query.clone(),
            category_id: model_cfg.category_id.clone(),
        };

        let html = match scraper.fetch(&request) {
            Ok(html) => html,
            Err(e) => {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ HTML: {:?}", e);
                continue;
            }
        };

        let mut offers = match parser.parse(&html) {
            Ok(o) => o,
            Err(e) => {
                eprintln!("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {:?}", e);
                continue;
            }
        };

        normalize_all(&mut offers, &config.models);

        let stats = analyzer.calculate_stats(&offers);
        let good_offers = analyzer.find_deals(&offers, &stats, model_cfg);

        println!(
            "üìä –ú–æ–¥–µ–ª—å: {} | –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {:.2} ‚Ç¨ | –ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω—ã—Ö: {}",
            stats.model,
            stats.avg_price,
            good_offers.len()
        );

        for offer in good_offers {
            println!("üí∏ {} ‚Äî {:.2} ‚Ç¨", offer.title, offer.price);
            println!("üîó {}", offer.link);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if let Err(e) = notifier.notify(&offer).await {
                eprintln!("‚ö† –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {:?}", e);
            }
        }

        println!("-----------------------------\n");
    }

    println!("üèÅ –ì–æ—Ç–æ–≤–æ. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥.", config.check_interval_seconds);
}