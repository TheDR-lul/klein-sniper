use crate::model::{NotifyError, Offer};
use crate::storage::SqliteStorage;
use crate::config::AppConfig;
use reqwest::{Client, Error};
use serde::Deserialize;
use std::sync::Arc;
use std::time::Duration;
use tokio::sync::Mutex;
use tokio::time::sleep;
#[derive(Debug, Deserialize)]
struct TelegramApiResponse {
    result: Vec<TelegramUpdate>,
}

#[derive(Debug, Deserialize)]
struct TelegramUpdate {
    update_id: i64,
    message: TelegramMessage,
}

#[derive(Debug, Deserialize)]
struct TelegramMessage {
    chat: TelegramChat,
    text: Option<String>,
}

#[derive(Debug, Deserialize)]
struct TelegramChat {
    id: i64,
}

pub struct TelegramNotifier {
    bot_token: String,
    chat_id: i64,
    client: Client,
    offset: i64,
    storage: Arc<Mutex<SqliteStorage>>,
    config: Arc<AppConfig>,

}

impl TelegramNotifier {
    pub fn new(bot_token: String, chat_id: i64, storage: Arc<Mutex<SqliteStorage>>,   config: Arc<AppConfig>,) -> Self {
        let client = Client::builder()
            .timeout(Duration::from_secs(10))
            .build()
            .expect("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å HTTP –∫–ª–∏–µ–Ω—Ç");

        Self {
            bot_token,
            chat_id,
            client,
            offset: 0,
            storage,
            config,
        }
    }

    pub async fn notify_text(&self, text: &str) -> Result<(), Error> {
        let url = format!("https://api.telegram.org/bot{}/sendMessage", self.bot_token);

        let text = text.to_string();
        let params = [
            ("chat_id", self.chat_id.to_string()),
            ("text", text),
        ];

        self.client.post(&url).form(&params).send().await?;
        Ok(())
    }

    pub async fn notify(&self, offer: &Offer) -> Result<(), NotifyError> {
        let url = format!("https://api.telegram.org/bot{}/sendMessage", self.bot_token);

        let message = format!(
            "üí∏ –ù–∞–π–¥–µ–Ω–æ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\nüì¶ –ú–æ–¥–µ–ª—å: {}\nüí∞ –¶–µ–Ω–∞: {:.2} ‚Ç¨\nüîó –°—Å—ã–ª–∫–∞: {}",
            offer.model, offer.price, offer.link
        );

        let params = [
            ("chat_id", self.chat_id.to_string()),
            ("text", message),
        ];

        let response = self
            .client
            .post(&url)
            .form(&params)
            .send()
            .await
            .map_err(|e| NotifyError::ApiError(format!("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {}", e)))?;

        if !response.status().is_success() {
            return Err(NotifyError::Unreachable);
        }

        Ok(())
    }

    pub async fn listen_for_commands(&mut self) {
        let url = format!("https://api.telegram.org/bot{}/getUpdates", self.bot_token);

        loop {
            let response = self
                .client
                .get(&url)
                .query(&[("offset", self.offset + 1)])
                .send()
                .await;

            if let Ok(resp) = response {
                if let Ok(api_response) = resp.json::<TelegramApiResponse>().await {
                    for update in api_response.result {
                        if let Some(text) = update.message.text.as_deref() {
                            match text {
                                "/ping" => {
                                    let _ = self.notify_text("‚úÖ –Ø –Ω–∞ —Å–≤—è–∑–∏!").await;
                                }
                                "/status" => {
                                    let _ = self.notify_text("üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ñ–¥—ë–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.").await;
                                }
                                "/help" => {
                                    let _ = self.notify_text("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n/status ‚Äî —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞\n/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n/top5 ‚Äî —Ç–æ–ø 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n/avg ‚Äî —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞\n/config ‚Äî —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è\n/refresh ‚Äî —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/uptime ‚Äî –∞–ø—Ç–∞–π–º —Å–µ—Ä–≤–∏—Å–∞").await;
                                }
                                "/last" => {
                                    match self.storage.lock().await.get_last_offer() {
                                        Ok(Some(offer)) => {
                                            let msg = format!(
                                                "üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\nüì¶ {}\nüí∞ {:.2} ‚Ç¨\nüìç {}\nüîó {}",
                                                offer.title, offer.price, offer.location, offer.link
                                            );
                                            let _ = self.notify_text(&msg).await;
                                        }
                                        Ok(None) => {
                                            let _ = self.notify_text("üì≠ –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ.").await;
                                        }
                                        Err(e) => {
                                            let _ = self.notify_text(&format!("‚ùå –û—à–∏–±–∫–∞: {:?}", e)).await;
                                        }
                                    }
                                }
                                "/top5" => {
                                    match self.storage.lock().await.get_top5_offers() {
                                        Ok(offers) if !offers.is_empty() => {
                                            let mut msg = String::from("üèÜ –¢–æ–ø-5 –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n");
                                            for (i, offer) in offers.iter().enumerate() {
                                                msg.push_str(&format!(
                                                    "{}. {} ‚Äî {:.2} ‚Ç¨\nüìç {}\nüîó {}\n\n",
                                                    i + 1,
                                                    offer.title,
                                                    offer.price,
                                                    offer.location,
                                                    offer.link
                                                ));
                                            }
                                            let _ = self.notify_text(&msg).await;
                                        }
                                        Ok(_) => {
                                            let _ = self.notify_text("üì≠ –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ.").await;
                                        }
                                        Err(e) => {
                                            let _ = self.notify_text(&format!("‚ùå –û—à–∏–±–∫–∞: {:?}", e)).await;
                                        }
                                    }
                                }
                                "/avg" => {
                                    match self.storage.lock().await.get_average_prices() {
                                        Ok(prices) if !prices.is_empty() => {
                                            let mut msg = String::from("üìä –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –º–æ–¥–µ–ª—è–º:\n");
                                            for (model, price) in prices {
                                                msg.push_str(&format!("üîπ {} ‚Äî {:.2} ‚Ç¨\n", model, price));
                                            }
                                            let _ = self.notify_text(&msg).await;
                                        }
                                        Ok(_) => {
                                            let _ = self.notify_text("üì≠ –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–æ–¥–µ–ª—è–º.").await;
                                        }
                                        Err(e) => {
                                            let _ = self.notify_text(&format!("‚ùå –û—à–∏–±–∫–∞: {:?}", e)).await;
                                        }
                                    }
                                }
                                "/config" => {
                                    if self.config.models.is_empty() {
                                        let _ = self.notify_text("‚ö†Ô∏è –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.").await;
                                    } else {
                                        let mut msg = String::from("‚öôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n");
                                        for model in &self.config.models {
                                            msg.push_str(&format!("üî∏ {} [{}]\n", model.query, model.category_id));
                                        }
                                        let _ = self.notify_text(&msg).await;
                                    }
                                }
                                _ => {
                                    let _ = self.notify_text("ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞.").await;
                                }
                            }
                        }
                        self.offset = update.update_id;
                    }
                }
            }

            sleep(Duration::from_secs(5)).await;
        }
    }

    pub async fn set_my_commands(&self) -> Result<(), Error> {
        let url = format!("https://api.telegram.org/bot{}/setMyCommands", self.bot_token);

        let commands = serde_json::json!({
            "commands": [
                { "command": "ping", "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" },
                { "command": "status", "description": "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞" },
                { "command": "help", "description": "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥" },
                { "command": "last", "description": "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" },
                { "command": "top5", "description": "–¢–æ–ø 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –≤—ã–≥–æ–¥–µ" },
                { "command": "avg", "description": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –º–æ–¥–µ–ª–∏" },
                { "command": "config", "description": "–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è" },
                { "command": "refresh", "description": "–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞" },
                { "command": "uptime", "description": "–ê–ø—Ç–∞–π–º —Å–∫–∞–Ω–µ—Ä–∞" }
            ]
        });

        self.client.post(&url).json(&commands).send().await?;
        Ok(())
    }
}